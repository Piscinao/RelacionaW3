#pragma checksum "C:\Users\pgcit\OneDrive\Área de Trabalho\Projetos-Git-Trabalho\RelacionaW3-Refatorado\relacionaw3.mvc\Views\Usuario\Create.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "a976087f8bc55a5e74086d5d1b5045ad239b9252"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Usuario_Create), @"mvc.1.0.view", @"/Views/Usuario/Create.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/Usuario/Create.cshtml", typeof(AspNetCore.Views_Usuario_Create))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "C:\Users\pgcit\OneDrive\Área de Trabalho\Projetos-Git-Trabalho\RelacionaW3-Refatorado\relacionaw3.mvc\Views\_ViewImports.cshtml"
using RelacionaW3.MVC;

#line default
#line hidden
#line 2 "C:\Users\pgcit\OneDrive\Área de Trabalho\Projetos-Git-Trabalho\RelacionaW3-Refatorado\relacionaw3.mvc\Views\_ViewImports.cshtml"
using RelacionaW3.MVC.Models;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"a976087f8bc55a5e74086d5d1b5045ad239b9252", @"/Views/Usuario/Create.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"8ff5f67da75fc0b1fd5374a73795734c2ee7e112", @"/Views/_ViewImports.cshtml")]
    public class Views_Usuario_Create : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("[formGroup]", new global::Microsoft.AspNetCore.Html.HtmlString("registerForm"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "AL", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "WY", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_3 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/lib/select2/js/select2.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_4 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/lib/select2/css/select2.min.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_5 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("rel", new global::Microsoft.AspNetCore.Html.HtmlString("stylesheet"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#line 1 "C:\Users\pgcit\OneDrive\Área de Trabalho\Projetos-Git-Trabalho\RelacionaW3-Refatorado\relacionaw3.mvc\Views\Usuario\Create.cshtml"
  
  ViewData["Title"] = "Cadastrar Usuário";

#line default
#line hidden
            BeginContext(48, 4, true);
            WriteLiteral("<h1>");
            EndContext();
            BeginContext(53, 17, false);
#line 4 "C:\Users\pgcit\OneDrive\Área de Trabalho\Projetos-Git-Trabalho\RelacionaW3-Refatorado\relacionaw3.mvc\Views\Usuario\Create.cshtml"
Write(ViewData["Title"]);

#line default
#line hidden
            EndContext();
            BeginContext(70, 4494, true);
            WriteLiteral(@"</h1>

<p>Cadastrar de Usuário.</p>


<!-- <div class=""row mt-4"">
  <div class=""col-md-6"" style=""height: 450px;"">
    <div class=""row col-md-12 my-auto side-heder"">
      <h1>Cadastro de Usuário</h1>
    </div>
  </div>
  <div class=""col-md-6"">
    <form [formGroup]=""registerForm"">
      <div class=""form-group required"">
        <label for="""">Nome Completo:</label>
        <input type=""text"" class=""form-control"" formControlName=""fullName"" [ngClass]=""{'is-invalid': registerForm.get('fullName').errors &&
                                  registerForm.get('fullName').touched }"" placeholder=""Insira o Nome Completo"" />
        <div *ngIf=""registerForm.get('fullName').hasError('required') &&
                    registerForm.get('fullName').touched"" class=""invalid-feedback"">
          Nome Completo é obrigatório.
        </div>
      </div>
      <div class=""form-group"">
        <label for="""">Email:</label>
        <input class=""form-control"" type=""text"" formControlName=""email"" [ngClass]=""{ 'is-invalid': registerFor");
            WriteLiteral(@"m.get('email').errors &&
                                     registerForm.get('email').touched}"" placeholder=""Insira o Nome Completo"" />
        <div *ngIf=""registerForm.get('email').hasError('required') &&
                    registerForm.get('email').touched"" class=""invalid-feedback"">
          email é obrigatório.
        </div>
        <div *ngIf=""registerForm.get('email').hasError('email')
        && registerForm.get('email').touched"" class=""invalid-feedback"">
          Deve ser um e-mail válido.
        </div>
      </div>
      <div class=""form-group"">
        <label for="""">Usuario:</label>
        <input class=""form-control"" type=""text"" formControlName=""userName"" [ngClass]=""{'is-invalid': registerForm.get('userName').errors &&
                                    registerForm.get('userName').touched}"" placeholder=""Insira o nome de Usuário"" />
        <div *ngIf=""registerForm.get('userName').hasError('required') &&
                    registerForm.get('userName').touched"" class=""invalid-feedback"">
    ");
            WriteLiteral(@"      Usuário é obrigatório.
        </div>
      </div>
      <div formGroupName=""passwords"">
        <div class=""form-group"">
          <label for="""">Senha:</label>
          <input class=""form-control"" type=""password"" formControlName=""password"" [ngClass]=""{ 'is-invalid': registerForm.get('passwords.password').errors &&
                                       registerForm.get('passwords.password').touched}""
            placeholder=""Digite uma Senha"" />
          <div *ngIf=""registerForm.get('passwords.password').hasError('minlength') &&
            registerForm.get('passwords.password').touched"" class=""invalid-feedback"">
            Deve conter no mínimo 4 caracters
          </div>
          <div *ngIf=""registerForm.get('passwords.password').hasError('required') &&
                      registerForm.get('passwords.password').touched"" class=""invalid-feedback"">
            Senha é obrigatório.
          </div>
        </div>
        <div class=""form-group"">
          <label for="""">Confirmar Senha:</label>
   ");
            WriteLiteral(@"       <input class=""form-control"" type=""password"" formControlName=""confirmPassword"" [ngClass]=""{ 'is-invalid': registerForm.get('passwords.confirmPassword').errors
                         && registerForm.get('passwords.confirmPassword').touched
                         ||registerForm.get('passwords.confirmPassword').hasError('mismatch')
                         && registerForm.get('passwords.confirmPassword').touched }"" placeholder=""Confirme a Senha"" />
          <div *ngIf=""registerForm.get('passwords.confirmPassword').hasError('required') &&
                      registerForm.get('passwords.confirmPassword').touched"" class=""invalid-feedback"">
            Confirme a Senha
          </div>
          <div *ngIf=""registerForm.get('passwords.confirmPassword').hasError('mismatch')
                      && registerForm.get('passwords.confirmPassword').touched"" class=""invalid-feedback"">
            Confirmação não confere
          </div>
        </div>
      </div>
      <div class=""form-row"">
        <div class");
            WriteLiteral(@"=""form-group col-md-8 offset-md-2"">
          <button class=""btn btn-lg btn-success btn-block"" [disabled]=""!registerForm.valid""
            (click)=""cadastrarUsuario()"">Registar</button>
        </div>
      </div>
    </form>
  </div>
</div> -->

<div class=""animated fadeIn"">
  <div class=""card"">
    <div class=""card-header"">
      Cadastrar Usuário
    </div>
    <div class=""card-body"">
      ");
            EndContext();
            BeginContext(4564, 3576, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("form", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "a976087f8bc55a5e74086d5d1b5045ad239b925211167", async() => {
                BeginContext(4597, 3536, true);
                WriteLiteral(@"
        <div class=""form-group required"">
          <div class=""col-md-5"">
            <label for="""">Nome Completo:</label>
            <input type=""text"" class=""form-control"" formControlName=""fullName"" placeholder=""Insira o Nome Completo"" />
            
          </div>
        </div>
 <div class=""form-group"">
          <div class=""col-md-5"">
      

 </div>
        </div>

        <div class=""form-group"">
          <div class=""col-md-5"">
            <label for="""">Email:</label>
            <input class=""form-control"" type=""text"" formControlName=""email"" [ngClass]=""{ 'is-invalid': registerForm.get('email').errors &&
                                           registerForm.get('email').touched}"" placeholder=""Insira o Nome Completo"" />
            <div *ngIf=""registerForm.get('email').hasError('required') &&
                          registerForm.get('email').touched"" class=""invalid-feedback"">
              email é obrigatório.
            </div>
            <div *ngIf=""registerForm.get('email').hasError('emai");
                WriteLiteral(@"l')
              && registerForm.get('email').touched"" class=""invalid-feedback"">
              Deve ser um e-mail válido.
            </div>
          </div>
        </div>
        <div class=""form-group"">
          <div class=""col-md-5"">
            <label for="""">Usuario:</label>

            <input class=""form-control"" type=""text"" formControlName=""userName"" [ngClass]=""{'is-invalid': registerForm.get('userName').errors &&
                                          registerForm.get('userName').touched}"" placeholder=""Insira o nome de Usuário"" />
            <div *ngIf=""registerForm.get('userName').hasError('required') &&
                          registerForm.get('userName').touched"" class=""invalid-feedback"">
              Usuário é obrigatório.
            </div>
          </div>
        </div>

        <div formGroupName=""passwords"">
          <div class=""form-group"">
            <div class=""col-md-5"">

              <label for="""">Senha:</label>
              <input class=""form-control"" type=""password"" formC");
                WriteLiteral(@"ontrolName=""password"" [ngClass]=""{ 'is-invalid': registerForm.get('passwords.password').errors &&
                                             registerForm.get('passwords.password').touched}""
                     placeholder=""Digite uma Senha"" />
             
            </div>
          </div>
          <div class=""form-group"">
            <div class=""col-md-5"">
              <label for="""">Confirmar Senha:</label>
              <input class=""form-control"" type=""password"" formControlName=""confirmPassword"" [ngClass]=""{ 'is-invalid': registerForm.get('passwords.confirmPassword').errors
                               && registerForm.get('passwords.confirmPassword').touched
                               ||registerForm.get('passwords.confirmPassword').hasError('mismatch')
                               && registerForm.get('passwords.confirmPassword').touched }"" placeholder=""Confirme a Senha"" />
              <div *ngIf=""registerForm.get('passwords.confirmPassword').hasError('required') &&
                       ");
                WriteLiteral(@"     registerForm.get('passwords.confirmPassword').touched"" class=""invalid-feedback"">
                Confirme a Senha
              </div>
              <div *ngIf=""registerForm.get('passwords.confirmPassword').hasError('mismatch')
                            && registerForm.get('passwords.confirmPassword').touched"" class=""invalid-feedback"">
                Confirmação não confere
              </div>
            </div>
          </div>
        </div>

      ");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(8140, 443, true);
            WriteLiteral(@"

      <div class=""card-footer"">
        <button type=""submit"" class=""btn btn btn-primary"" [disabled]=""!registerForm.valid""
                (click)=""cadastrarUsuario()"">
          <i class=""fa fa-check""></i> Cadastrar
        </button>
        <button type=""reset"" class=""btn btn btn-danger""  href=""#""><i class=""fa fa-ban""></i> Cancelar</button>
      </div>


<select class=""js-example-basic-multiple"" name=""states[]"" multiple=""multiple"">
  ");
            EndContext();
            BeginContext(8583, 35, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "a976087f8bc55a5e74086d5d1b5045ad239b925216915", async() => {
                BeginContext(8602, 7, true);
                WriteLiteral("Alabama");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_1.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_1);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(8618, 11, true);
            WriteLiteral("\n    ...\n  ");
            EndContext();
            BeginContext(8629, 35, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "a976087f8bc55a5e74086d5d1b5045ad239b925218303", async() => {
                BeginContext(8648, 7, true);
                WriteLiteral("Wyoming");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_2.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_2);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(8664, 32, true);
            WriteLiteral("\n</select>\n\n    </div>\n  </div>\n");
            EndContext();
            DefineSection("scripts", async() => {
                BeginContext(8716, 3, true);
                WriteLiteral("\n\n ");
                EndContext();
                BeginContext(8719, 55, false);
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "a976087f8bc55a5e74086d5d1b5045ad239b925219891", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_3);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                EndContext();
                BeginContext(8774, 3, true);
                WriteLiteral(" \n ");
                EndContext();
                BeginContext(8777, 65, false);
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "a976087f8bc55a5e74086d5d1b5045ad239b925221143", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_4);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_5);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                EndContext();
                BeginContext(8842, 110, true);
                WriteLiteral("\n\n  <script>\n   $(document).ready(function() {\n    $(\'.js-example-basic-multiple\').select2();\n});\n  </script>\n");
                EndContext();
            }
            );
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
